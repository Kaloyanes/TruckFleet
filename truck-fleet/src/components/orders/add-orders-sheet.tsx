"use client";
import React, { useEffect, useState } from "react";
import {
	Sheet,
	SheetClose,
	SheetContent,
	SheetTitle,
	SheetTrigger,
} from "../ui/sheet";
import { Button } from "../ui/button";
import { useTranslations } from "next-intl";
import { z, ZodSchema } from "zod";
import type { Order } from "./order-table/columns";
import AutoForm from "../ui/auto-form";
import {
	collection,
	query,
	serverTimestamp,
	where,
	type DocumentData,
	type DocumentReference,
	type Timestamp,
} from "firebase/firestore";
import {
	useCollectionDataOnce,
	useCollectionOnce,
	useDocumentDataOnce,
} from "react-firebase-hooks/firestore";
import { db } from "@/firebase/firebase";
import useCompanyId from "@/hooks/useCompanyId";
import { Select, SelectContent, SelectItem, SelectTrigger } from "../ui/select";

// All of the comments are selected menus or autoGenerated

export default function AddOrdersSheet() {
	const t = useTranslations("AddOrderSheet");
	const companyId = useCompanyId();
	const [drivers, driverLoading, driverError] = useCollectionOnce(
		query(
			collection(db, "users"),
			where("companyId", "==", companyId),
			where("type", "==", "driver"),
		),
	);
	const [companies, companiesLoading, companiesError] = useCollectionOnce(
		query(collection(db, "companies")),
	);

	// if (error) {
	// 	console.error(error);
	// 	return <></>;
	// }

	useEffect(() => {
		console.log(companies?.docs, drivers?.docs);
	}, [companies, drivers]);

	const sheetFormSchema = z.object({
		// id: z.string(),
		size: z.string().optional(),
		sum: z.number().optional(),
		weight: z.number().optional(),
		status: z.enum(["Picking Up", "In Delivery", "Delivered"]).optional(),
		// customerInfo: z.object({
		// 	orderId: z.string(),
		// 	worker: z.string(),
		// }),

		// documents: z.array(
		// 	z.object({
		// 		link: z.string(),
		// 		name: z.string(),
		// 	}),
		// ), // Placeholder for file data
		driver: z.custom((data) => {
			if (data === null || data === undefined) return false;

			return data;
		}), // Replace with actual DocumentData schema

		truck: z.custom<DocumentReference>().optional(), // Replace with actual DocumentData schema
		pickUps: z
			.array(
				z.object({
					address: z.string(),
					start: z.custom<Timestamp>(), // Replace with actual Timestamp schema
					end: z.custom<Timestamp>(), // Replace with actual Timestamp schema
				}),
			)
			.optional(),
		deliveries: z
			.array(
				z.object({
					address: z.string(),
					start: z.custom<Timestamp>(), // Replace with actual Timestamp schema
					end: z.custom<Timestamp>(), // Replace with actual Timestamp schema
				}),
			)
			.optional(),
		documents: z.custom((data) => {
			if (data === null || data === undefined) return false;

			return data;
		}),
		note: z.string().optional(),
		// createdAt: z.custom<Timestamp>((data) => {
		//   return serverTimestamp();
		// }), // Replace with actual Timestamp schema
	});

	const [driverName, setDriverName] = useState<string | null>(null);
	const [driverRef, setDriverRef] = useState<DocumentReference | null>(null);

	return (
		<Sheet>
			<SheetTrigger>
				<Button>{t("title")}</Button>
			</SheetTrigger>
			<SheetContent className="overflow-y-scroll ">
				<SheetTitle className="w-full py-6">{t("title")}</SheetTitle>
				<AutoForm
					formSchema={sheetFormSchema}
					onSubmit={(values) => {
						console.log(values);
					}}
					className="w-full p-2"
					fieldConfig={{
						documents: {
							fieldType: "file",
						},
						driver: {
							renderParent: ({ children }) => {
								return (
									<Select
										value={driverName ?? ""}
										onValueChange={(value) => {
											console.log(value);
											const driver = drivers?.docs.find(
												(doc) => doc.data().name === value,
											);
											if (driver) {
												setDriverRef(driver.ref);
												console.log(driver.ref);
											}

											setDriverName(value);
										}}
									>
										<SelectTrigger>{driverName}</SelectTrigger>
										<SelectContent>
											{drivers?.docs.map((driver) => {
												const driverData = driver.data();

												return (
													<SelectItem key={driver.id} value={driverData.name}>
														{driverData.name}
													</SelectItem>
												);
											})}
										</SelectContent>
									</Select>
								);
							},
						},
					}}
				>
					<div className="flex sticky bottom-0 justify-center items-center gap-4">
						<SheetClose>
							<Button type="button" className="" variant={"outline"}>
								{t("cancel")}
							</Button>
						</SheetClose>
						<Button className="" type="submit">
							{t("submit")}
						</Button>
					</div>
				</AutoForm>
			</SheetContent>
		</Sheet>
	);
}
